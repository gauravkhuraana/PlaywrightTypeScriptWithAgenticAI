name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - api
          - visual
          - accessibility
          - performance
      browser:
        description: 'Browser to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      continue-on-error: true
      run: |
        if [ "${{ github.event.inputs.test_suite }}" = "smoke" ]; then
          npx playwright test --grep "@smoke" --project="${{ matrix.project }}" --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        elif [ "${{ github.event.inputs.test_suite }}" = "regression" ]; then
          npx playwright test --grep "@regression" --project="${{ matrix.project }}" --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        elif [ "${{ github.event.inputs.test_suite }}" = "api" ]; then
          npx playwright test tests/api --project="${{ matrix.project }}" --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        elif [ "${{ github.event.inputs.test_suite }}" = "visual" ]; then
          npx playwright test tests/visual --project="${{ matrix.project }}" --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        elif [ "${{ github.event.inputs.test_suite }}" = "accessibility" ]; then
          npx playwright test tests/accessibility --project="${{ matrix.project }}" --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        elif [ "${{ github.event.inputs.test_suite }}" = "performance" ]; then
          npx playwright test tests/performance --project="${{ matrix.project }}" --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        else
          npx playwright test --project="${{ matrix.project }}" --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        fi
      env:
        BASE_URL: https://example.com
        API_BASE_URL: https://jsonplaceholder.typicode.com
        TEST_ENV: ci
        DEBUG: pw:api*

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.project }}-${{ matrix.shard }}
        path: playwright-report/
        retention-days: 30

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.project }}-${{ matrix.shard }}
        path: test-results/
        retention-days: 30

    - name: Upload Allure Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-${{ matrix.project }}-${{ matrix.shard }}
        path: allure-results/
        retention-days: 30

  merge-reports:
    # Merge reports from all shards
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts
        pattern: '*'
        merge-multiple: false

    - name: Debug artifact structure
      run: |
        echo "=== Artifact Structure ==="
        if [ -d "all-artifacts" ]; then
          find all-artifacts -type f | head -20
          echo "=== Looking for allure files ==="
          find all-artifacts -name "*allure*" -type d
          find all-artifacts -name "*.json" | grep -E "(result|container)" | head -10
        else
          echo "Error: all-artifacts directory not found"
          ls -la
        fi
        echo "=== End Debug ==="

    - name: Merge HTML reports
      run: |
        mkdir -p merged-reports
        # Copy all HTML reports to merged directory
        find all-artifacts -name "*.html" -exec cp {} merged-reports/ \;
        
    - name: Generate Allure Report
      if: always()
      run: |
        # Combine all allure results
        mkdir -p combined-allure-results
        
        # Look for allure results in downloaded artifacts
        echo "Searching for allure results..."
        if [ -d "all-artifacts" ]; then
          # Find and display allure result files
          echo "Found the following allure-related files:"
          find all-artifacts -type f -name "*.json" | grep -E "(result|container|attachment)" | head -10
          
          # Copy different types of allure files
          echo "Copying JSON result and container files..."
          find all-artifacts -type f -name "*.json" | grep -E "(result|container)" | xargs -I {} cp {} combined-allure-results/ 2>/dev/null || echo "No JSON result files found"
          
          echo "Copying attachment files..."
          find all-artifacts -type f -name "*.txt" | grep -E "attachment" | xargs -I {} cp {} combined-allure-results/ 2>/dev/null || echo "No text attachment files found"
          find all-artifacts -type f -name "*.webm" | grep -E "attachment" | xargs -I {} cp {} combined-allure-results/ 2>/dev/null || echo "No video attachment files found"
          find all-artifacts -type f -name "*.png" | grep -E "attachment" | xargs -I {} cp {} combined-allure-results/ 2>/dev/null || echo "No image attachment files found"
          find all-artifacts -type f -name "categories.json" | xargs -I {} cp {} combined-allure-results/ 2>/dev/null || echo "No categories file found"
          find all-artifacts -type f -name "environment.properties" | xargs -I {} cp {} combined-allure-results/ 2>/dev/null || echo "No environment file found"
        else
          echo "Warning: all-artifacts directory not found"
        fi
        
        # List what we found
        echo "Files in combined-allure-results:"
        if [ -d "combined-allure-results" ] && [ "$(ls -A combined-allure-results 2>/dev/null)" ]; then
          ls -la combined-allure-results/
          echo "Total files: $(ls -1 combined-allure-results | wc -l)"
        else
          echo "Directory is empty or does not exist"
        fi
        
        # Check if we have any allure results
        if [ -d "combined-allure-results" ] && [ "$(ls -A combined-allure-results 2>/dev/null)" ]; then
          echo "Found allure results, generating report..."
          # Copy combined results to allure-results directory
          rm -rf allure-results
          mv combined-allure-results allure-results
          
          # Install allure-commandline if not already available
          if ! command -v allure &> /dev/null; then
            echo "Installing allure-commandline globally..."
            npm install -g allure-commandline@2.24.0
          fi
          
          # Generate Allure report with more verbose output
          echo "Generating Allure report..."
          allure generate allure-results --clean -o allure-report || {
            echo "Allure generation failed, trying npm script..."
            npm run allure:generate || {
              echo "Both allure generation methods failed"
              mkdir -p allure-report
              echo '<!DOCTYPE html><html><head><title>Allure Generation Failed</title></head><body><h1>Allure Report Generation Failed</h1><p>The Allure report could not be generated from the available results.</p><p>Available files were:</p><pre>' > allure-report/index.html
              ls -la allure-results/ >> allure-report/index.html || echo "No files found" >> allure-report/index.html
              echo '</pre></body></html>' >> allure-report/index.html
            }
          }
          
          # Verify the report was generated
          if [ -f "allure-report/index.html" ]; then
            echo "✅ Allure report generated successfully"
            ls -la allure-report/
          else
            echo "❌ Allure report generation failed"
          fi
        else
          echo "No allure results found, creating empty allure report directory"
          mkdir -p allure-report
          echo '<!DOCTYPE html><html><head><title>No Allure Results</title></head><body><h1>No Allure test results available</h1><p>Allure reporter may not be configured or no tests were run.</p></body></html>' > allure-report/index.html
        fi

    - name: Upload Merged Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: merged-playwright-report
        path: merged-reports/
        retention-days: 30

    - name: Upload Allure Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-report
        path: allure-report/
        retention-days: 30

  deploy-reports:
    # Deploy reports to GitHub Pages (optional - will skip if Pages not enabled)
    if: always() && (github.ref == 'refs/heads/main')
    needs: [merge-reports]
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Setup Pages
      id: setup-pages
      uses: actions/configure-pages@v4
      with:
        # Enable Pages if not already enabled
        enablement: true
      continue-on-error: true

    - name: Check if Pages setup succeeded
      id: pages-check
      run: |
        if [ "${{ steps.setup-pages.outcome }}" == "success" ]; then
          echo "pages_enabled=true" >> $GITHUB_OUTPUT
        else
          echo "pages_enabled=false" >> $GITHUB_OUTPUT
          echo "⚠️ GitHub Pages not available - skipping deployment"
        fi

    - name: Download merged reports
      if: steps.pages-check.outputs.pages_enabled == 'true'
      uses: actions/download-artifact@v4
      with:
        name: merged-playwright-report
        path: public/playwright

    - name: Download Allure report
      if: steps.pages-check.outputs.pages_enabled == 'true'
      uses: actions/download-artifact@v4
      with:
        name: allure-report
        path: public/allure
      continue-on-error: true

    - name: Check Allure availability
      if: steps.pages-check.outputs.pages_enabled == 'true'
      id: allure-check
      run: |
        if [ -d "public/allure" ] && [ "$(ls -A public/allure)" ]; then
          echo "allure_available=true" >> $GITHUB_OUTPUT
          echo "✅ Allure report available"
        else
          echo "allure_available=false" >> $GITHUB_OUTPUT
          echo "⚠️ Allure report not available"
          mkdir -p public/allure
          echo '<!DOCTYPE html><html><head><title>Allure Unavailable</title></head><body><h1>Allure Report Unavailable</h1><p>The Allure report could not be generated or downloaded.</p></body></html>' > public/allure/index.html
        fi

    - name: Create index page
      if: steps.pages-check.outputs.pages_enabled == 'true'
      run: |
        # Create the index page with conditional Allure link
        allure_link=""
        if [ "${{ steps.allure-check.outputs.allure_available }}" == "true" ]; then
          allure_link='<a href="./allure/index.html">Allure Report</a>'
        else
          allure_link='<a href="./allure/index.html" style="background: #6c757d;">Allure Report (Unavailable)</a>'
        fi
        
        cat > public/index.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
            <title>Test Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; margin: 20px 0; }
                .card h2 { margin-top: 0; color: #333; }
                .card a { display: inline-block; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 4px; margin: 5px 0; }
                .card a:hover { background: #0056b3; }
                .status { font-size: 0.9em; color: #666; margin-top: 10px; }
            </style>
        </head>
        <body>
            <h1>Playwright Test Reports</h1>
            <div class="card">
                <h2>📊 Test Reports</h2>
                <p>Access detailed test execution reports</p>
                <a href="./playwright/index.html">Playwright HTML Report</a>
                ${allure_link}
                <div class="status">
                  <p>Report generated: $(date)</p>
                  <p>Allure status: ${{ steps.allure-check.outputs.allure_available == 'true' && 'Available' || 'Not Available' }}</p>
                </div>
            </div>
            <div class="card">
                <h2>🔗 Quick Links</h2>
                <p>Additional resources</p>
                <a href="https://github.com/${{ github.repository }}">GitHub Repository</a>
                <a href="https://github.com/${{ github.repository }}/actions">GitHub Actions</a>
            </div>
        </body>
        </html>
        EOF

    - name: Upload Pages artifact
      if: steps.pages-check.outputs.pages_enabled == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: public

    - name: Deploy to GitHub Pages
      if: steps.pages-check.outputs.pages_enabled == 'true'
      id: deployment
      uses: actions/deploy-pages@v4

  notify:
    # Send notifications
    if: always()
    needs: [test, merge-reports]
    runs-on: ubuntu-latest
    steps:
    - name: Calculate test results
      id: results
      run: |
        # This would typically parse the test results
        echo "success_rate=85" >> $GITHUB_OUTPUT
        echo "total_tests=120" >> $GITHUB_OUTPUT
        echo "passed_tests=102" >> $GITHUB_OUTPUT
        echo "failed_tests=18" >> $GITHUB_OUTPUT

    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "🧪 Playwright Tests Completed",
          "attachments": [
            {
              "color": "${{ needs.test.result == 'success' && 'good' || 'danger' }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Success Rate",
                  "value": "${{ steps.results.outputs.success_rate }}%",
                  "short": true
                },
                {
                  "title": "Test Results",
                  "value": "✅ ${{ steps.results.outputs.passed_tests }} passed, ❌ ${{ steps.results.outputs.failed_tests }} failed",
                  "short": true
                },
                {
                  "title": "Reports",
                  "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                  "short": false
                }
              ]
            }
          ]
        }' \
        $SLACK_WEBHOOK_URL

    - name: Send Teams notification
      if: env.TEAMS_WEBHOOK_URL != ''
      env:
        TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-Type: application/json' \
        --data '{
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "summary": "Playwright Tests Completed",
          "themeColor": "${{ needs.test.result == 'success' && '00FF00' || 'FF0000' }}",
          "sections": [{
            "activityTitle": "🧪 Playwright Tests",
            "activitySubtitle": "${{ github.repository }} - ${{ github.ref_name }}",
            "facts": [
              {
                "name": "Success Rate",
                "value": "${{ steps.results.outputs.success_rate }}%"
              },
              {
                "name": "Results",
                "value": "✅ ${{ steps.results.outputs.passed_tests }} passed, ❌ ${{ steps.results.outputs.failed_tests }} failed"
              }
            ],
            "potentialAction": [{
              "@type": "OpenUri",
              "name": "View Details",
              "targets": [{
                "os": "default",
                "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }]
            }]
          }]
        }' \
        $TEAMS_WEBHOOK_URL

  security-scan:
    # Security scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        npm audit --audit-level=high --json > npm-audit.json || true
        
    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-results
        path: npm-audit.json
        retention-days: 30
